{"ast":null,"code":"/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n\n/* global define */\n(function () {\n  'use strict';\n\n  var hasOwn = {}.hasOwnProperty;\n\n  function classNames() {\n    var classes = '';\n\n    for (var i = 0; i < arguments.length; i++) {\n      var arg = arguments[i];\n\n      if (arg) {\n        classes = appendClass(classes, parseValue(arg));\n      }\n    }\n\n    return classes;\n  }\n\n  function parseValue(arg) {\n    if (typeof arg === 'string' || typeof arg === 'number') {\n      return arg;\n    }\n\n    if (typeof arg !== 'object') {\n      return '';\n    }\n\n    if (Array.isArray(arg)) {\n      return classNames.apply(null, arg);\n    }\n\n    if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n      return arg.toString();\n    }\n\n    var classes = '';\n\n    for (var key in arg) {\n      if (hasOwn.call(arg, key) && arg[key]) {\n        classes = appendClass(classes, key);\n      }\n    }\n\n    return classes;\n  }\n\n  function appendClass(value, newClass) {\n    if (!newClass) {\n      return value;\n    }\n\n    if (value) {\n      return value + ' ' + newClass;\n    }\n\n    return value + newClass;\n  }\n\n  if (typeof module !== 'undefined' && module.exports) {\n    classNames.default = classNames;\n    module.exports = classNames;\n  } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n    // register as 'classnames', consistent with npm package name\n    define('classnames', [], function () {\n      return classNames;\n    });\n  } else {\n    window.classNames = classNames;\n  }\n})();","map":{"version":3,"sources":["/Users/sauravthakur/Desktop/Github/portfolio/node_modules/classnames/index.js"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","appendClass","parseValue","Array","isArray","apply","toString","Object","prototype","includes","key","call","value","newClass","module","exports","default","define","amd","window"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AAEC,aAAY;AACZ;;AAEA,MAAIA,MAAM,GAAG,GAAGC,cAAhB;;AAEA,WAASC,UAAT,GAAuB;AACtB,QAAIC,OAAO,GAAG,EAAd;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAC1C,UAAIG,GAAG,GAAGF,SAAS,CAACD,CAAD,CAAnB;;AACA,UAAIG,GAAJ,EAAS;AACRJ,QAAAA,OAAO,GAAGK,WAAW,CAACL,OAAD,EAAUM,UAAU,CAACF,GAAD,CAApB,CAArB;AACA;AACD;;AAED,WAAOJ,OAAP;AACA;;AAED,WAASM,UAAT,CAAqBF,GAArB,EAA0B;AACzB,QAAI,OAAOA,GAAP,KAAe,QAAf,IAA2B,OAAOA,GAAP,KAAe,QAA9C,EAAwD;AACvD,aAAOA,GAAP;AACA;;AAED,QAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC5B,aAAO,EAAP;AACA;;AAED,QAAIG,KAAK,CAACC,OAAN,CAAcJ,GAAd,CAAJ,EAAwB;AACvB,aAAOL,UAAU,CAACU,KAAX,CAAiB,IAAjB,EAAuBL,GAAvB,CAAP;AACA;;AAED,QAAIA,GAAG,CAACM,QAAJ,KAAiBC,MAAM,CAACC,SAAP,CAAiBF,QAAlC,IAA8C,CAACN,GAAG,CAACM,QAAJ,CAAaA,QAAb,GAAwBG,QAAxB,CAAiC,eAAjC,CAAnD,EAAsG;AACrG,aAAOT,GAAG,CAACM,QAAJ,EAAP;AACA;;AAED,QAAIV,OAAO,GAAG,EAAd;;AAEA,SAAK,IAAIc,GAAT,IAAgBV,GAAhB,EAAqB;AACpB,UAAIP,MAAM,CAACkB,IAAP,CAAYX,GAAZ,EAAiBU,GAAjB,KAAyBV,GAAG,CAACU,GAAD,CAAhC,EAAuC;AACtCd,QAAAA,OAAO,GAAGK,WAAW,CAACL,OAAD,EAAUc,GAAV,CAArB;AACA;AACD;;AAED,WAAOd,OAAP;AACA;;AAED,WAASK,WAAT,CAAsBW,KAAtB,EAA6BC,QAA7B,EAAuC;AACtC,QAAI,CAACA,QAAL,EAAe;AACd,aAAOD,KAAP;AACA;;AAED,QAAIA,KAAJ,EAAW;AACV,aAAOA,KAAK,GAAG,GAAR,GAAcC,QAArB;AACA;;AAED,WAAOD,KAAK,GAAGC,QAAf;AACA;;AAED,MAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACC,OAA5C,EAAqD;AACpDpB,IAAAA,UAAU,CAACqB,OAAX,GAAqBrB,UAArB;AACAmB,IAAAA,MAAM,CAACC,OAAP,GAAiBpB,UAAjB;AACA,GAHD,MAGO,IAAI,OAAOsB,MAAP,KAAkB,UAAlB,IAAgC,OAAOA,MAAM,CAACC,GAAd,KAAsB,QAAtD,IAAkED,MAAM,CAACC,GAA7E,EAAkF;AACxF;AACAD,IAAAA,MAAM,CAAC,YAAD,EAAe,EAAf,EAAmB,YAAY;AACpC,aAAOtB,UAAP;AACA,KAFK,CAAN;AAGA,GALM,MAKA;AACNwB,IAAAA,MAAM,CAACxB,UAAP,GAAoBA,UAApB;AACA;AACD,CArEA,GAAD","sourcesContent":["/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = '';\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (arg) {\n\t\t\t\tclasses = appendClass(classes, parseValue(arg));\n\t\t\t}\n\t\t}\n\n\t\treturn classes;\n\t}\n\n\tfunction parseValue (arg) {\n\t\tif (typeof arg === 'string' || typeof arg === 'number') {\n\t\t\treturn arg;\n\t\t}\n\n\t\tif (typeof arg !== 'object') {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (Array.isArray(arg)) {\n\t\t\treturn classNames.apply(null, arg);\n\t\t}\n\n\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\treturn arg.toString();\n\t\t}\n\n\t\tvar classes = '';\n\n\t\tfor (var key in arg) {\n\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\tclasses = appendClass(classes, key);\n\t\t\t}\n\t\t}\n\n\t\treturn classes;\n\t}\n\n\tfunction appendClass (value, newClass) {\n\t\tif (!newClass) {\n\t\t\treturn value;\n\t\t}\n\t\n\t\tif (value) {\n\t\t\treturn value + ' ' + newClass;\n\t\t}\n\t\n\t\treturn value + newClass;\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n"]},"metadata":{},"sourceType":"script"}